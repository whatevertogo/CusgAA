对话系统与文本特效使用指南
通过检查您提供的三个脚本，我认为之前的使用指南基本完善，但可以补充一些细节以便更有效地使用这个系统。以下是完整的使用指南：

系统设置与配置
基础设置
场景配置：

创建一个空游戏对象，添加 DialogueManager 脚本
为对话文本 UI 添加 DialogueTextEffects 脚本
可选：添加 TextEffectsController 进行特效参数调整
对话管理器配置：

设置 UI 引用（对话面板、角色名称、对话文本等）
将带有 DialogueTextEffects 的文本对象拖拽到 textEffects 字段
配置事件监听器（onDialogueStart、onDialogueEnd 等）
文本特效配置：

设置打字速度、音效和频率
调整颤抖和波浪效果参数
使用特效标签
对话文本中支持以下特效标签：
<effect=shake>颤抖文字</effect>          // 抖动效果
<effect=wave>波浪文字</effect>           // 波浪效果
<speed=0.02>快速文字</speed>            // 控制打字速度（秒/字符）
<pause=1.5>                           // 暂停1.5秒

这是<effect=shake>颤抖的<speed=0.1>快速</speed>文字</effect>，
这是<effect=wave>波浪<pause=1.0>暂停后的波浪</effect>。

对话数据创建
创建对话有两种方式：

1.通过 ScriptableObject：

// 在编辑器中创建
[CreateAssetMenu(fileName = "NewDialogue", menuName = "Dialogue/Dialogue Data")]
public class Dialogue_SO : ScriptableObject
{
    public string characterName;
    public Sprite characterSprite;
    public List<string> dialogueLines = new List<string>();
    // ...其他字段
}

2.通过代码动态创建：(推荐)
Dialogue_SO dialogue = ScriptableObject.CreateInstance<Dialogue_SO>();
dialogue.characterName = "角色名";
dialogue.dialogueLines.Add("这是<effect=shake>带特效的</effect>对话");

DialogueManager.Instance.StartDialogue(dialogue);


高级功能使用
分支对话系统(我能用但是没时间看了)

// 创建带分支的对话
Dialogue_SO mainDialogue = CreateDialogue("主对话");
Dialogue_SO branch1 = CreateDialogue("分支1");
Dialogue_SO branch2 = CreateDialogue("分支2");

mainDialogue.hasBranch = true;
mainDialogue.branches.Add(new Branch { optionText = "选择1", nextDialogue = branch1 });
mainDialogue.branches.Add(new Branch { optionText = "选择2", nextDialogue = branch2 });

// 启动带分支的对话
DialogueManager.Instance.StartDialogue(mainDialogue);

实时调整特效参数

// 获取文本特效组件
DialogueTextEffects effects = FindObjectOfType<DialogueTextEffects>();

// 调整参数
effects.ShakeIntensity = 5f;  // 增加抖动强度
effects.WaveSpeed = 3f;       // 加快波浪速度

测试与调试工具
使用 TextEffectsController 可以实时调整特效参数：

1.创建简单的 UI 面板，包含多个滑块控制各项参数
2.将滑块关联到控制器中的相应字段
3.使用测试按钮触发示例文本展示

// 示例：调整打字速度
public void SetTypingSpeed(float speed)
{
    textEffects.DefaultTypeSpeed = speed;
}



常见问题解决
文本不显示或特效不工作：

确认 TextMeshProUGUI 组件存在且配置正确
检查 DialogueTextEffects 引用是否设置
标签语法是否正确（大小写敏感）
打字机效果不工作：

确保 defaultTypeSpeed 值适当（0.02-0.1是合理范围）
检查是否有其他脚本干扰文本更新
波浪或抖动效果过强/过弱：

调整对应的 Intensity 和 Speed 参数
波浪效果：waveIntensity=2-10, waveSpeed=1-5
抖动效果：shakeIntensity=0.5-5, shakeSpeed=20-100
扩展建议
要添加新的文本特效类型，可以：

在 EffectType 枚举中添加新类型
在 ProcessTags 方法中添加新标签处理
在 Update 方法中实现新特效的顶点处理逻辑
例如，添加"跳跃"效果：


// 在EffectType枚举中添加
Jump,

// 在Update顶点处理中添加
case EffectType.Jump:
    float jumpOffset = Mathf.PingPong(Time.time * 2f, 1f) * 10f;
    offset = new Vector3(0, jumpOffset, 0);
    break;

